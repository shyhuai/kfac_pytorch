diff --git a/examples/pytorch_cifar10_resnet.py b/examples/pytorch_cifar10_resnet.py
index c6d1cfa..f41e8ae 100644
--- a/examples/pytorch_cifar10_resnet.py
+++ b/examples/pytorch_cifar10_resnet.py
@@ -26,6 +26,8 @@ import kfac
 import logging
 import horovod.torch as hvd
 
+import wandb
+
 #torch.multiprocessing.set_start_method('spawn')
 
 logger = logging.getLogger()
@@ -112,7 +114,12 @@ args.cuda = not args.no_cuda and torch.cuda.is_available()
 # Horovod: initialize library.
 hvd.init()
 
-logfile = './logs/convergence_cifar10_{}_kfac{}_gpu{}_bs{}_{}.log'.format(args.model, args.kfac_update_freq, hvd.size(), args.batch_size, args.kfac_name)
+
+logfilename = 'convergence_cifar10_{}_kfac{}_gpu{}_bs{}_{}.log'.format(args.model, args.kfac_update_freq, hvd.size(), args.batch_size, args.kfac_name)
+if hvd.rank() == 0:
+    wandb.init(project='kfac', entity='shyhuai', name=logfilename, config=args)
+
+logfile = './logs/'+logfilename
 #logfile = './logs/sparse_cifar10_{}_kfac{}_gpu{}_bs{}.log'.format(args.model, args.kfac_update_freq, hvd.size(), args.batch_size)
 #logfile = './logs/cifar10_{}_kfac{}_gpu{}_bs{}.log'.format(args.model, args.kfac_update_freq, hvd.size(), args.batch_size)
 hdlr = logging.FileHandler(logfile)
@@ -283,6 +290,8 @@ def train(epoch):
                 if args.verbose:
                     logger.info("[%d][%d] train loss: %.4f, acc: %.3f, time: %.3f, speed: %.3f images/s" % (epoch, batch_idx, train_loss.avg.item(), 100*train_accuracy.avg.item(), avg_time/display, args.batch_size/(avg_time/display)))
                     avg_time = 0.0
+            if hvd.rank() == 0:
+                wandb.log({"loss": loss})
         if args.verbose:
             logger.info("[%d] epoch train loss: %.4f, acc: %.3f" % (epoch, train_loss.avg.item(), 100*train_accuracy.avg.item()))
 
@@ -315,6 +324,8 @@ def test(epoch):
                 test_accuracy.update(accuracy(output, target))
             if args.verbose:
                 logger.info("[%d][0] evaluation loss: %.4f, acc: %.3f" % (epoch, test_loss.avg.item(), 100*test_accuracy.avg.item()))
+                if hvd.rank() == 0:
+                    wandb.log({"val top-1 acc": test_accuracy.avg.item()})
                 
                 #t.update(1)
                 #if i + 1 == len(test_loader):
